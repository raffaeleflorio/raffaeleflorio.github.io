<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>oop on raffaeleflorio ~/</title>
    <link>https://raffaeleflorio.github.io/tags/oop/</link>
    <description>Recent content in oop on raffaeleflorio ~/</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://raffaeleflorio.github.io/tags/oop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Objects &amp; Pursuit of Happiness: Understanding Object Oriented Programming (OOP)</title>
      <link>https://raffaeleflorio.github.io/post/object-and-pursuit-of-happiness/</link>
      <pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://raffaeleflorio.github.io/post/object-and-pursuit-of-happiness/</guid>
      <description>Responsibilities are what differentiate objects. They represent what an object can do for us. And in a good object-oriented system, each object should have correct responsibilities.
Is there any criterion to help us to verify and find them? I think happiness is a good answer.
A metaphor The common way to define objects is wrong. Objects are not just data plus functions. In other words, objects are not a C file containing structs and related functions.</description>
    </item>
    
    <item>
      <title>Java: The Object Equality Problem</title>
      <link>https://raffaeleflorio.github.io/post/java-the-object-equality-problem/</link>
      <pubDate>Fri, 18 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raffaeleflorio.github.io/post/java-the-object-equality-problem/</guid>
      <description>I was writing some Java test code when I faced up the voracity of the equals method. It presents, despite its ostensible simplicity, a tricky problem.
I&amp;rsquo;d like to emphasize that this is not a specific Java issue. For example C# has a homologous way.
A bit of Java context The Object class is the root of every class. It defines various methods and equals is one of them. By default this method has a simple behavior: an object x is only equals to itself.</description>
    </item>
    
    <item>
      <title>Spring Framework: To Use Or Not To Use, That Is The Question</title>
      <link>https://raffaeleflorio.github.io/post/spring-to-use-or-not-to-use/</link>
      <pubDate>Wed, 18 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://raffaeleflorio.github.io/post/spring-to-use-or-not-to-use/</guid>
      <description>It&amp;rsquo;s impossible to write OOP code with Spring. From its core it promotes the use of singletons and anemic data structures a.k.a. data &amp;ldquo;objects&amp;rdquo; a.k.a. DTO. This fuels procedural programming and kills OOP.
In the next paragraphs I&amp;rsquo;ll highlight three major Spring components involved. I start from the core.
IoC Container The core of Spring is the IoC container, represented by the ApplicationContext interface. Basically it defines a context through which we get beans.</description>
    </item>
    
  </channel>
</rss>
